spring:
  datasource:
    url: jdbc:h2:mem:testdb;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: create-drop
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    properties:
      hibernate:
        show_sql: true
        format_sql: true
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-name: Google
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            scope:
              - openid
              - email
              - profile

        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

# JWT 공통 설정
jwt:
  access-token-secret: ${ACCESS_TOKEN}
  refresh-token-secret: ${REFRESH_TOKEN}
  access-token-expiration: ${EXPIRATION_TIME}
  refresh-token-expiration: ${EXPIRATION_DATE}

# ★ 추가된 부분: Google OAuth2 API URL
oauth2:
  google:
    token-uri: https://oauth2.googleapis.com/token
    user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
  data:
    redis:
      host: localhost
      port: 6379
      password:
